name: code-analisys

on:
  workflow_call:
    inputs:
      workspace:
        required: true
        type: string
      repositoryName:
        required: true
        type: string
      args:
        type: string
        required: false 
    secrets:
      SONAR_TOKEN:
        required: true
      SONAR_HOST_URL:
        required: true
    outputs:
      quality_ok:
        value: ${{ jobs.sonarqube.outputs.quality_ok }}
jobs:
  sonarqube:
    runs-on: self-hosted
    outputs:
      quality_ok: ${{ steps.check.outcome == 'success' }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: jest-results
          path: ${{ inputs.workspace }}
      - run: pwd
      - run: ls -la ${{ inputs.workspace }}
      - name: sonarqube_external_args
        if: inputs.args
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: ${{ format('/github/workspace{0}', inputs.workspace != '' && format('/{0}', inputs.workspace) || '' ) }} 
          args: ${{ inputs.args }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: sonarqube_default
        if: inputs.args == null
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: /github/workspace
          args: >
            -Dsonar.projectKey=${{ inputs.repositoryName }}
            -Dsonar.sources=.
            -Dsonar.exclusions=**/coverage/*,**/coverage/**/*,**/*test*/datasets/*,**/*test*/datasets/**/*
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.coverage.exclusions=**/coverage/*,**/coverage/**/*,**/*test*,**/*test*/*,**/*test*/**/*,**/*.spec.*
            -Dsonar.cpd.exclusions=**/*test*/*,**/*test*/**/*,**/*.spec.*
            -Dsonar.test.inclusions=**/*test*,**/test/**/*,**/*test*,**/*test*/*,**/*test*/**/*,**/*.spec.*
            -Dsonar.testExecutionReportPaths=test-report-sonar.xml
            -Dsonar.tests=.
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: SonarQube Quality Gate check
        id: check
        continue-on-error: true
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          scanMetadataReportFile: ${{ format('{0}.scannerwork/report-task.txt', inputs.workspace != '' && format('{0}/', inputs.workspace) || '' ) }}
        timeout-minutes: 1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: test
        run: echo "${{ steps.check.outcome == 'success' }}"
      - run: echo "::warning ::Quality check failed"
        if: steps.check.outcome != 'success'


